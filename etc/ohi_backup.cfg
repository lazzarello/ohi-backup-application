###########################################################################
#  Open Hosting API Backup (OAB)
#  Configuration File
#  
#  build 0131
###########################################################################

# The first two variables establish your credentials with the platform and
# need to be set before the first use. The third is the API's url.

# api_user is your user UUID found here: 
#  https://east1.openhosting.com/accounts/profile
#api_user=""
		  
# api_secret is your user secret API key found here: 
#  https://east1.openhosting.com/accounts/profile
#api_secret=""
			
# api_address is the address used to connect to the Open Hosting API
api_address="https://api-east1.openhosting.com/"



# OAB is designed to backup servers created from OHI pre-installed
# images. Contact support@openhosting.com, if you don't find the UUID of
# the pre-installed image from which you created your master:
#   pre-installed centos 5.6         4d67096a-c2b5-4be7-9716-d4b2f9e2d4b5
#   pre-installed centos 5.5         1fc52c4b-f08d-4f9f-8821-7fdd073a32d6
#   pre-installed ubuntu 10.10       8067ee3c-e9a5-48a7-a3a7-8c158ce039db
#   pre-installed debian 5.0         9c1a506a-5d2b-496b-9ebc-26cfeae76f42

# pre_install_uuid is the drive that will be copied from if a previous
# backup drive does not exist, or can't be accessed. 
pre_install_uuid="c7b64dec-9154-4a99-b19a-1a1f96b7ea20"



# OAB has two modes of operation: incremental or zero-state.
# Incremental promises faster performance and reduced network traffic by
# first cloning yesterday’s backup, then rsync-ing against that. (The
# assumption being that yesterday’s backup is more similar than a fresh
# install; therefore, rync will complete faster.) In zero-state mode, a new
# server is created from the master’s base server image. Rsync then runs
# and brings the new install in sync with the master. In zero-state mode
# no backup is ever booted.

# incremental_backup defines whether or not to use incremental backups. 
# It can either be set to false or true.
incremental_backup="true"


# OAB will maintain a fixed number of the most-recent backups. 
# max_backups is the number of backup drives to keep. 
max_backups=4



# The drives created by this process will be named: 
#    <server name><backup_tag><YYY_MM_DD_HH>
# backup_tag is a string added to the middle of names of the backup drives
# and clone server.
backup_tag="_ohibackup_"



# The clone server is used to boot and mount the backup drive and run
# rsync. It is then destroyed. These variables determine the server's
# speed and memory. Larger servers backup faster with more powerful clones.

# clone_server_mhz is the amount of Mhz allocated to the clone server. 
# Minimum value is 500.
clone_server_mhz="500"

# clone_server_mem is the megabytes of RAM allocated to the clone server.
# Minimum value is 256.
clone_server_mem="256"



# maximum number of attempts the backup will try to rsync to the remote
# server, should the rsync fail.
max_rsync_tries=3



# backup_exclude_list is a list of files and/or directories that will be
# excluded from the backup process. Each item should be separated by a "|".
# Directories such as /prod/ and /dev/ have been excluded already.
# backup_exclude_list="/usr/local/exclude_dir/|/usr/local/exclude_dir2/"




# backup_inventory_location is the path to the file that contains the list
# of drives that are current backups of this server. 
backup_inventory_location="/usr/local/etc/backup_drives.lst"



# The following three events allow for OAB customization.

# When the backup process starts these scripts may be called. Especially
# useful if your server has a database, which should first be dumped.  
#local_pre_script="/usr/local/bin/pre_backup.sh"

# When the backup process ends these scripts may be called.
#local_post_script="/usr/local/bin/post_backup.sh"

# When rsync completes these scripts may be called and executed on the
# clone server. This event is especially handy if you run OAB in
# incremental mode, because the process of running rsync means booting
# yesterday’s backup. Any services or jobs set to start at boot would then
# start, and this might be undesirable. To control for this and similar
# cases, you can specify the execution of commands on the remote sever
# after rsync completes and before the server is shutdown. This would allow
# you to halt all services or daemons.
#remote_post_script="/usr/local/bin/remote_post_backup.sh"
